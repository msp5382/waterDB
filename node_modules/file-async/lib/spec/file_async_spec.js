'use strict';

var _spec_helper = require('./spec_helper');

var _spec_helper2 = _interopRequireDefault(_spec_helper);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fileAsync = require('../src/file-async');

var _fileAsync2 = _interopRequireDefault(_fileAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('fsAsync:', function () {

  it("should keep support sync methods", function () {
    _spec_helper2.default.expect(_fileAsync2.default.existsSync(__filename)).to.ok;
  });

  it("should keep support callback methods", function (done) {
    _fileAsync2.default.readFileCallback(__filename, function (err, file_content) {
      _spec_helper2.default.expect(file_content.toString()).not.been.undefined;
      done();
    });
  });

  it('should read a file', function () {
    return _fileAsync2.default.readFile(__filename).then(function (file_content) {
      return _spec_helper2.default.expect(file_content.toString()).not.been.undefined;
    });
  });

  it('should get fsStat from file', function () {
    return _fileAsync2.default.stat(__filename).then(function (fsStat) {
      return _spec_helper2.default.expect(fsStat.isFile()).to.eql(true);
    });
  });

  it('should write a file', function () {
    var TMP_FILE_PATH = '/tmp/file_content.js';

    // readFile this file content
    return _fileAsync2.default.readFile(__filename).then(function (file_content) {
      // write file
      return _fileAsync2.default.writeFile(TMP_FILE_PATH, file_content.toString());
    }).then(function () {
      // get stat
      return _fileAsync2.default.stat(TMP_FILE_PATH);
    }).then(function (file_stat) {
      // check if tmp file exists
      return _spec_helper2.default.expect(file_stat.isFile()).to.be.equal(true);
    }).then(function () {
      // remove tmp file
      return _fileAsync2.default.remove(TMP_FILE_PATH);
    }).then(function () {
      // exits?
      return _fileAsync2.default.exists(TMP_FILE_PATH);
    }).then(function (file_exists) {
      // check again
      return _spec_helper2.default.expect(file_exists).to.be.equal(false);
    });
  });

  it('should createFile an empty file', function () {
    var TMP_FILE_PATH = '/tmp/file_content.js';

    // touch
    return _fileAsync2.default.createFile(TMP_FILE_PATH).then(function () {
      // get stat
      return _fileAsync2.default.stat(TMP_FILE_PATH);
    }).then(function (file_stat) {
      // check
      return _spec_helper2.default.expect(file_stat.isFile()).to.be.equal(true);
    }).then(function () {
      // remove tmp file
      return _fileAsync2.default.remove(TMP_FILE_PATH);
    }).then(function () {
      // exits?
      return _fileAsync2.default.exists(TMP_FILE_PATH);
    }).then(function (file_exists) {
      // check again
      return _spec_helper2.default.expect(file_exists).to.be.equal(false);
    });
  });

  it('should copy a folder to another', function () {
    var file_content;

    // read: get this content
    return _fileAsync2.default.readFile(__filename).then(function (content) {
      file_content = content.toString();
    }).then(function () {
      // mkdirs: create folders
      return _fileAsync2.default.mkdirs('/tmp/folder1/folder2/');
    }).then(function () {
      // stat: check if folders were created
      return _bluebird2.default.all([_fileAsync2.default.stat('/tmp/folder1').then(function (stat_result) {
        return _spec_helper2.default.expect(stat_result.isDirectory()).to.be.equal(true);
      }), _fileAsync2.default.stat('/tmp/folder1/folder2').then(function (stat_result) {
        return _spec_helper2.default.expect(stat_result.isDirectory()).to.be.equal(true);
      })]);
    }).then(function () {
      // write: write files
      return _bluebird2.default.all([_fileAsync2.default.writeFile('/tmp/folder1/some-file-1.js', file_content), _fileAsync2.default.writeFile('/tmp/folder1/folder2/some-file-2.js', file_content)]);
    }).then(function () {
      // copy: copy file tree
      return _fileAsync2.default.copy('/tmp/folder1/', '/tmp/folder1-copy/');
    }).then(function () {
      // stat: check files stats
      return _bluebird2.default.all([_fileAsync2.default.stat('/tmp/folder1-copy/some-file-1.js').then(function (stat_result) {
        return _spec_helper2.default.expect(stat_result.isFile()).to.be.equal(true);
      }), _fileAsync2.default.stat('/tmp/folder1-copy/folder2/some-file-2.js').then(function (stat_result) {
        return _spec_helper2.default.expect(stat_result.isFile()).to.be.equal(true);
      })]);
    }).then(function () {
      return _bluebird2.default.all([_fileAsync2.default.remove('/tmp/folder1'), _fileAsync2.default.remove('/tmp/folder1-copy')]);
    }).then(function () {
      // stat: check files stats
      return _bluebird2.default.all([_fileAsync2.default.exists('/tmp/folder1').then(function (exists_result) {
        return _spec_helper2.default.expect(exists_result).to.be.equal(false);
      }), _fileAsync2.default.exists('/tmp/folder1-copy').then(function (exists_result) {
        return _spec_helper2.default.expect(exists_result).to.be.equal(false);
      })]);
    });
  });

  it('should create and check a symbolic link', function () {
    var file_content;
    // read: get this content
    return _fileAsync2.default.readFile(__filename).then(function (content) {
      file_content = content.toString();
    }).then(function () {
      // mkdirs: create folders
      return _fileAsync2.default.mkdirs('/tmp/folder1/folder2/');
    }).then(function () {
      // write: write files
      return _fileAsync2.default.writeFile('/tmp/folder1/some-file-1.js', file_content.toString());
    }).then(function () {
      // symlink: make symlink
      return _fileAsync2.default.symlink('/tmp/folder1/some-file-1.js', '/tmp/folder1/folder2/some-file-symlink-1.js', 'file');
    }).then(function () {
      // stat: check file stat
      return _fileAsync2.default.stat('/tmp/folder1/some-file-1.js').then(function (stat_result) {
        return _spec_helper2.default.expect(stat_result.isFile()).to.be.equal(true);
      });
    }).then(function () {
      // lstat: check symlink stat
      return _fileAsync2.default.lstat('/tmp/folder1/folder2/some-file-symlink-1.js').then(function (lstat_result) {
        return _spec_helper2.default.expect(lstat_result.isSymbolicLink()).to.be.equal(true);
      });
    }).then(function () {
      return _fileAsync2.default.remove('/tmp/folder1');
    }).then(function () {
      // stat: check files stats
      return _fileAsync2.default.exists('/tmp/folder1').then(function (exists_result) {
        return _spec_helper2.default.expect(exists_result).to.be.equal(false);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,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cm9tICcuL3NwZWNfaGVscGVyJztcbmltcG9ydCBCQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgZnNBc3luYyBmcm9tICcuLi9zcmMvZmlsZS1hc3luYyc7XG5cbmRlc2NyaWJlKCdmc0FzeW5jOicsIGZ1bmN0aW9uKCkge1xuXG4gIGl0KFwic2hvdWxkIGtlZXAgc3VwcG9ydCBzeW5jIG1ldGhvZHNcIiwgZnVuY3Rpb24oKSB7XG4gICAgaC5leHBlY3QoZnNBc3luYy5leGlzdHNTeW5jKF9fZmlsZW5hbWUpKS50by5vaztcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQga2VlcCBzdXBwb3J0IGNhbGxiYWNrIG1ldGhvZHNcIiwgZnVuY3Rpb24oZG9uZSkge1xuICAgIGZzQXN5bmMucmVhZEZpbGVDYWxsYmFjayhfX2ZpbGVuYW1lLCBmdW5jdGlvbihlcnIsIGZpbGVfY29udGVudCkge1xuICAgICAgaC5leHBlY3QoZmlsZV9jb250ZW50LnRvU3RyaW5nKCkpLm5vdC5iZWVuLnVuZGVmaW5lZDtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZWFkIGEgZmlsZScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnNBc3luYy5yZWFkRmlsZShfX2ZpbGVuYW1lKS50aGVuKGZ1bmN0aW9uKGZpbGVfY29udGVudCkge1xuICAgICAgcmV0dXJuIGguZXhwZWN0KGZpbGVfY29udGVudC50b1N0cmluZygpKS5ub3QuYmVlbi51bmRlZmluZWQ7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IGZzU3RhdCBmcm9tIGZpbGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZzQXN5bmMuc3RhdChfX2ZpbGVuYW1lKS50aGVuKGZ1bmN0aW9uKGZzU3RhdCkge1xuICAgICAgcmV0dXJuIGguZXhwZWN0KGZzU3RhdC5pc0ZpbGUoKSkudG8uZXFsKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHdyaXRlIGEgZmlsZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgVE1QX0ZJTEVfUEFUSCA9ICcvdG1wL2ZpbGVfY29udGVudC5qcyc7XG5cbiAgICAvLyByZWFkRmlsZSB0aGlzIGZpbGUgY29udGVudFxuICAgIHJldHVybiBmc0FzeW5jLnJlYWRGaWxlKF9fZmlsZW5hbWUpLnRoZW4oZnVuY3Rpb24gKGZpbGVfY29udGVudCkge1xuICAgICAgLy8gd3JpdGUgZmlsZVxuICAgICAgcmV0dXJuIGZzQXN5bmMud3JpdGVGaWxlKFRNUF9GSUxFX1BBVEgsIGZpbGVfY29udGVudC50b1N0cmluZygpKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gZ2V0IHN0YXRcbiAgICAgIHJldHVybiBmc0FzeW5jLnN0YXQoVE1QX0ZJTEVfUEFUSCk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbihmaWxlX3N0YXQpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHRtcCBmaWxlIGV4aXN0c1xuICAgICAgcmV0dXJuIGguZXhwZWN0KGZpbGVfc3RhdC5pc0ZpbGUoKSkudG8uYmUuZXF1YWwodHJ1ZSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIC8vIHJlbW92ZSB0bXAgZmlsZVxuICAgICAgcmV0dXJuIGZzQXN5bmMucmVtb3ZlKFRNUF9GSUxFX1BBVEgpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAvLyBleGl0cz9cbiAgICAgIHJldHVybiBmc0FzeW5jLmV4aXN0cyhUTVBfRklMRV9QQVRIKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKGZpbGVfZXhpc3RzKSB7XG4gICAgICAvLyBjaGVjayBhZ2FpblxuICAgICAgcmV0dXJuIGguZXhwZWN0KGZpbGVfZXhpc3RzKS50by5iZS5lcXVhbChmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY3JlYXRlRmlsZSBhbiBlbXB0eSBmaWxlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBUTVBfRklMRV9QQVRIID0gJy90bXAvZmlsZV9jb250ZW50LmpzJztcblxuICAgIC8vIHRvdWNoXG4gICAgcmV0dXJuIGZzQXN5bmMuY3JlYXRlRmlsZShUTVBfRklMRV9QQVRIKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGdldCBzdGF0XG4gICAgICByZXR1cm4gZnNBc3luYy5zdGF0KFRNUF9GSUxFX1BBVEgpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oZmlsZV9zdGF0KSB7XG4gICAgICAvLyBjaGVja1xuICAgICAgcmV0dXJuIGguZXhwZWN0KGZpbGVfc3RhdC5pc0ZpbGUoKSkudG8uYmUuZXF1YWwodHJ1ZSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIC8vIHJlbW92ZSB0bXAgZmlsZVxuICAgICAgcmV0dXJuIGZzQXN5bmMucmVtb3ZlKFRNUF9GSUxFX1BBVEgpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAvLyBleGl0cz9cbiAgICAgIHJldHVybiBmc0FzeW5jLmV4aXN0cyhUTVBfRklMRV9QQVRIKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKGZpbGVfZXhpc3RzKSB7XG4gICAgICAvLyBjaGVjayBhZ2FpblxuICAgICAgcmV0dXJuIGguZXhwZWN0KGZpbGVfZXhpc3RzKS50by5iZS5lcXVhbChmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY29weSBhIGZvbGRlciB0byBhbm90aGVyJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBmaWxlX2NvbnRlbnQ7XG5cbiAgICAvLyByZWFkOiBnZXQgdGhpcyBjb250ZW50XG4gICAgcmV0dXJuIGZzQXN5bmMucmVhZEZpbGUoX19maWxlbmFtZSkudGhlbihmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICBmaWxlX2NvbnRlbnQgPSBjb250ZW50LnRvU3RyaW5nKCk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIC8vIG1rZGlyczogY3JlYXRlIGZvbGRlcnNcbiAgICAgIHJldHVybiBmc0FzeW5jLm1rZGlycygnL3RtcC9mb2xkZXIxL2ZvbGRlcjIvJyk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIC8vIHN0YXQ6IGNoZWNrIGlmIGZvbGRlcnMgd2VyZSBjcmVhdGVkXG4gICAgICByZXR1cm4gQkIuYWxsKFtcbiAgICAgICAgZnNBc3luYy5zdGF0KCcvdG1wL2ZvbGRlcjEnKS50aGVuKGZ1bmN0aW9uKHN0YXRfcmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIGguZXhwZWN0KHN0YXRfcmVzdWx0LmlzRGlyZWN0b3J5KCkpLnRvLmJlLmVxdWFsKHRydWUpO1xuICAgICAgICB9KSxcbiAgICAgICAgZnNBc3luYy5zdGF0KCcvdG1wL2ZvbGRlcjEvZm9sZGVyMicpLnRoZW4oZnVuY3Rpb24oc3RhdF9yZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gaC5leHBlY3Qoc3RhdF9yZXN1bHQuaXNEaXJlY3RvcnkoKSkudG8uYmUuZXF1YWwodHJ1ZSk7XG4gICAgICAgIH0pLFxuICAgICAgXSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIC8vIHdyaXRlOiB3cml0ZSBmaWxlc1xuICAgICAgcmV0dXJuIEJCLmFsbChbXG4gICAgICAgIGZzQXN5bmMud3JpdGVGaWxlKCcvdG1wL2ZvbGRlcjEvc29tZS1maWxlLTEuanMnLCBmaWxlX2NvbnRlbnQpLFxuICAgICAgICBmc0FzeW5jLndyaXRlRmlsZSgnL3RtcC9mb2xkZXIxL2ZvbGRlcjIvc29tZS1maWxlLTIuanMnLCBmaWxlX2NvbnRlbnQpLFxuICAgICAgXSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIC8vIGNvcHk6IGNvcHkgZmlsZSB0cmVlXG4gICAgICByZXR1cm4gZnNBc3luYy5jb3B5KCcvdG1wL2ZvbGRlcjEvJywgJy90bXAvZm9sZGVyMS1jb3B5LycpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAvLyBzdGF0OiBjaGVjayBmaWxlcyBzdGF0c1xuICAgICAgcmV0dXJuIEJCLmFsbChbXG4gICAgICAgIGZzQXN5bmMuc3RhdCgnL3RtcC9mb2xkZXIxLWNvcHkvc29tZS1maWxlLTEuanMnKS50aGVuKGZ1bmN0aW9uKHN0YXRfcmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIGguZXhwZWN0KHN0YXRfcmVzdWx0LmlzRmlsZSgpKS50by5iZS5lcXVhbCh0cnVlKTtcbiAgICAgICAgfSksXG4gICAgICAgIGZzQXN5bmMuc3RhdCgnL3RtcC9mb2xkZXIxLWNvcHkvZm9sZGVyMi9zb21lLWZpbGUtMi5qcycpLnRoZW4oZnVuY3Rpb24oc3RhdF9yZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gaC5leHBlY3Qoc3RhdF9yZXN1bHQuaXNGaWxlKCkpLnRvLmJlLmVxdWFsKHRydWUpO1xuICAgICAgICB9KSxcbiAgICAgIF0pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gQkIuYWxsKFtcbiAgICAgICAgZnNBc3luYy5yZW1vdmUoJy90bXAvZm9sZGVyMScpLFxuICAgICAgICBmc0FzeW5jLnJlbW92ZSgnL3RtcC9mb2xkZXIxLWNvcHknKSxcbiAgICAgIF0pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAvLyBzdGF0OiBjaGVjayBmaWxlcyBzdGF0c1xuICAgICAgcmV0dXJuIEJCLmFsbChbXG4gICAgICAgIGZzQXN5bmMuZXhpc3RzKCcvdG1wL2ZvbGRlcjEnKS50aGVuKGZ1bmN0aW9uKGV4aXN0c19yZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gaC5leHBlY3QoZXhpc3RzX3Jlc3VsdCkudG8uYmUuZXF1YWwoZmFsc2UpO1xuICAgICAgICB9KSxcbiAgICAgICAgZnNBc3luYy5leGlzdHMoJy90bXAvZm9sZGVyMS1jb3B5JykudGhlbihmdW5jdGlvbihleGlzdHNfcmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIGguZXhwZWN0KGV4aXN0c19yZXN1bHQpLnRvLmJlLmVxdWFsKGZhbHNlKTtcbiAgICAgICAgfSksXG4gICAgICBdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYW5kIGNoZWNrIGEgc3ltYm9saWMgbGluaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmlsZV9jb250ZW50O1xuICAgIC8vIHJlYWQ6IGdldCB0aGlzIGNvbnRlbnRcbiAgICByZXR1cm4gZnNBc3luYy5yZWFkRmlsZShfX2ZpbGVuYW1lKS50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgIGZpbGVfY29udGVudCA9IGNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gbWtkaXJzOiBjcmVhdGUgZm9sZGVyc1xuICAgICAgcmV0dXJuIGZzQXN5bmMubWtkaXJzKCcvdG1wL2ZvbGRlcjEvZm9sZGVyMi8nKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gd3JpdGU6IHdyaXRlIGZpbGVzXG4gICAgICByZXR1cm4gZnNBc3luYy53cml0ZUZpbGUoJy90bXAvZm9sZGVyMS9zb21lLWZpbGUtMS5qcycsIGZpbGVfY29udGVudC50b1N0cmluZygpKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gc3ltbGluazogbWFrZSBzeW1saW5rXG4gICAgICByZXR1cm4gZnNBc3luYy5zeW1saW5rKCcvdG1wL2ZvbGRlcjEvc29tZS1maWxlLTEuanMnLCAnL3RtcC9mb2xkZXIxL2ZvbGRlcjIvc29tZS1maWxlLXN5bWxpbmstMS5qcycsICdmaWxlJyk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIC8vIHN0YXQ6IGNoZWNrIGZpbGUgc3RhdFxuICAgICAgcmV0dXJuIGZzQXN5bmMuc3RhdCgnL3RtcC9mb2xkZXIxL3NvbWUtZmlsZS0xLmpzJykudGhlbihmdW5jdGlvbihzdGF0X3Jlc3VsdCkge1xuICAgICAgICByZXR1cm4gaC5leHBlY3Qoc3RhdF9yZXN1bHQuaXNGaWxlKCkpLnRvLmJlLmVxdWFsKHRydWUpO1xuICAgICAgfSk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIC8vIGxzdGF0OiBjaGVjayBzeW1saW5rIHN0YXRcbiAgICAgIHJldHVybiBmc0FzeW5jLmxzdGF0KCcvdG1wL2ZvbGRlcjEvZm9sZGVyMi9zb21lLWZpbGUtc3ltbGluay0xLmpzJykudGhlbihmdW5jdGlvbihsc3RhdF9yZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIGguZXhwZWN0KGxzdGF0X3Jlc3VsdC5pc1N5bWJvbGljTGluaygpKS50by5iZS5lcXVhbCh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnNBc3luYy5yZW1vdmUoJy90bXAvZm9sZGVyMScpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAvLyBzdGF0OiBjaGVjayBmaWxlcyBzdGF0c1xuICAgICAgcmV0dXJuIGZzQXN5bmMuZXhpc3RzKCcvdG1wL2ZvbGRlcjEnKS50aGVuKGZ1bmN0aW9uKGV4aXN0c19yZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIGguZXhwZWN0KGV4aXN0c19yZXN1bHQpLnRvLmJlLmVxdWFsKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6ImZpbGUtYXN5bmMtMC4yLjAgLSBzcGVjIn0=
